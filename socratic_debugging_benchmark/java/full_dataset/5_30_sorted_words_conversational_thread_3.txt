<problem>
Write a function `getWords(String s) -> List<String>` that extracts all the words from the input string `s`, changes them all to be lower case, and returns a list containing all unique words (no duplicates) in alphabetical order. Assume that a word is a maximal sequence of characters that does not contain any space. For example, `getWords("Hello World hello")` should return `['hello', 'world']`.

## Example Cases:
```
getWords("Hello World") => ['hello', 'world']
getWords("Hello World hello") => ['hello', 'world']
getWords("Hello World hello world") => ['hello', 'world']
getWords("Hello World H e l l o W o r l d") => ['d', 'e', 'h', 'hello', 'l', 'o', 'r', 'w', 'world']
getWords("A C B c b a") => ['a', 'b', 'c']
```
</problem>
<bug_code>
1. public List<String> getWords(String s) {
2.    List<String> words = Arrays.asList(s.toLowerCase().split(" "));
3.    return words.stream().sorted().collect(Collectors.toList());
4. }
</bug_code>
<bug_desc>
The function returns a list of sorted words in alphabetical order, however, if `s` contains repeated words, the function returns all the words instead of removing the duplicated words in `s`.
</bug_desc>
<bug_fixes>
Replace `words.stream().sorted().collect(Collectors.toList())` with `words.stream().distinct().sorted().collect(Collectors.toList())` on line 3.
</bug_fixes>
<unit_tests>
assert getWords("Hello World").equals(Arrays.asList("hello", "world"));
assert getWords("Hello World hello").equals(Arrays.asList("hello", "world"));
assert getWords("Hello World hello world").equals(Arrays.asList("hello", "world"));
assert getWords("Hello World H e l l o W o r l d").equals(Arrays.asList("d", "e", "h", "hello", "l", "o", "r", "w", "world"));
assert getWords("A C B c b a").equals(Arrays.asList("a", "b", "c"));
</unit_tests>
<stu_desc>

</stu_desc>
<dialogue>
User: Hey! I made my `getWords(s)` function, but it's not working correctly. What should I do?
Assistant: Hello! Can you explain to me what the code on line 2 does?
	<alt>Let's review the problem description together. What are the requirements for the returned list?
	<alt>Does your code work for all the examples in the problem description or does it fail on some of them?
	<alt>Can you walk me through your `getWords` function?
	<alt>Let's run through the examples in the problem description. What happens when you run `getWords("Hello World")` and `getWords("Hello World hello")`? What do you observe?
	<alt>Let's start with a simple example. Say you have a list of letters `['A', 'A', 'B']`. How would you remove the duplicate letters from the list and return a list of unique letters?
User: The code on line two is a single-line loop that will return the value of every word in lowercase.
	<alt>It returns a list of words.
Assistant: And what does line 3 accomplish?
	<alt>Where do you alphabetically sort the list provided?
	<alt>Can you print the value of words before line 3?
User: It sorts the values in `words` alphabetically.
Assistant: Can you explain what the problem wants you to return?
	<alt>Where do you remove duplicate values from words?
	<alt>Let's run through the examples in the problem description. What happens when you run `getWords("Hello World")` and `getWords("Hello World hello")`? What do you observe?
User: Oh! The problem wants me to return a sorted list without duplicates. Is there a given function to do that?
	<alt>Oh! The problem wants me to return a list with no duplicates! I've fixed it now, thank you!
<code>
1. public List<String> getWords(String s) {
2.    List<String> words = Arrays.asList(s.toLowerCase().split(" "));
3.    return words.stream().distinct().sorted().collect(Collectors.toList());
4. }
</code>
Assistant: I feel like the best way to describe this would be to enforce a math concept. What do you call a mathematical collection without duplicates?
	<alt>Let's recollect what we know about data structures. Which data structure in Java would store unique elements only?
	<alt>Is there a data structure in Java that stores unique elements only?
	<alt>Where can you learn about deduplicating a list in Java?
User: Oh, a set! I figured it out, thank you!
<code>
1. public List<String> getWords(String s) {
2.    List<String> words = Arrays.asList(s.toLowerCase().split(" "));
3.    return words.stream().distinct().sorted().collect(Collectors.toList());
4. }
</code>
Assistant: No problem! If you have any more issues, please feel free to talk about them now or later.
</dialogue>