<problem>
Write a method `splitApples(int apples, int children) -> int` that takes in an amount of apples and a number of children. The function should distribute `apples` evenly across all `children`. The function should return the whole number of apples each child will get after distributing the apples evenly. Assume that both `apples` and `children` are positive whole numbers.

## Example Cases:
```
splitApples(10, 2) => 5
splitApples(7, 2) => 3
splitApples(100, 100) => 1
splitApples(1, 2) => 0
```
</problem>
<bug_code>
1. public static int splitApples(int apples, int children) {
2.     int i = 0;
3.     while (apples > 0 && apples > children) {
4.         apples = apples - children;
5.         i++;
6.     }
7.     return i;
8. }
</bug_code>
<bug_desc>
The while loop exits early when `apples` are divisible by `children`. Consequently, the function has an off-by-one error when `apples` is divisible by `children`.
</bug_desc>
<bug_fixes>
Replace `apples > children` with `apples >= children` on line 3.
</bug_fixes>
<unit_tests>
assert splitApples(10, 2) == 5;
assert splitApples(7, 2) == 3;
assert splitApples(100, 100) == 1;
assert splitApples(1, 2) == 0;
</unit_tests>
<stu_desc>

</stu_desc>
<dialogue>
User: Hi! My function fails two test cases and I do not understand why, can you help?
Assistant: Sure, I can help. Let's consider the third test case where `apples = 100` and `children = 100`. Can you manually run through the code and explain what happens, line by line?
	<alt>Sure. Do you see anything special about the test cases it fails, compared to the ones where it works well?
	<alt>Sure. Let's consider the third test case where `apples = 100` and `children = 100`. What is the number returned by your function?
	<alt>Sure. Can you explain to me what you are trying to do with the while loop?
	<alt>Sure. Can you tell me what the loop condition `apples > children` is there for?
	<alt>Sure. Can you explain your code to me, what is supposed to do, line by line?
User: On line 2, the variable `i`, which holds the number of apples we give each child so far, is initialized with 0. On line 3, we check to see first if `apples > 0`, which is true, and if `apples > children`, which is  ... false. Ah, I see where the problem is, the loop stops too early, it should iterate also when `apples` is equal to `children`. Let me fix that ... it works now, thank you!
<code>
1. public static int splitApples(int apples, int children) {
2.     int i = 0;
3.     while (apples > 0 && apples >= children) {
4.         apples = apples - children;
5.         i++;
6.     }
7.     return i;
8. }
</code>
Assistant: You're welcome, glad I could help!
</dialogue>