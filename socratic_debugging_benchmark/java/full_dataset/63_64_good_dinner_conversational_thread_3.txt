<problem>
You like to eat pizzas for dinner. A good dinner is a dinner where you eat between 10 and 20 pizzas (inclusive). Unless it is a weekend, in which case there is no upper bound on the number of pizzas. Write a function called `GoodDinner(int pizzas, boolean weekend) -> boolean` which takes two inputs: the number of pizzas you eat, and a boolean which is true if it is the weekend and false otherwise. Your function should return true if you had a good dinner, and false if you didn't.

## Example Cases:
```
GoodDinner(10, false) => true
GoodDinner(20, false) => true
GoodDinner(5, false) => false
GoodDinner(21, false) => false
GoodDinner(10, true) => true
GoodDinner(21, true) => true
GoodDinner(5, true) => false
```
</problem>
<bug_code>
1. public static boolean GoodDinner(int pizzas, boolean weekend) {
2.     if (pizzas >= 10 && weekend) {
3.         return true;
4.     } else if (pizzas <= 20 && !weekend) {
5.         return true;
6.     }
7.     return false;
8. }
</bug_code>
<bug_desc>
The function incorrectly returns true instead of false when it is a weekday and `pizzas` is less than 10.
</bug_desc>
<bug_fixes>
Insert `pizzas >= 10 &&` before `pizzas <= 20 && !weekend` in the elif condition on line 4.
</bug_fixes>
<unit_tests>
assert GoodDinner(10, false) == true;
assert GoodDinner(20, false) == true;
assert GoodDinner(5, false) == false;
assert GoodDinner(21, false) == false;
assert GoodDinner(10, true) == true;
assert GoodDinner(21, true) == true;
assert GoodDinner(5, true) == false;
</unit_tests>
<stu_desc>

</stu_desc>
<dialogue>
User: Hello! I was working on my `GoodDinner()` function and I'm running into a roadblock. I just can't see where the issue in my code is.
Assistant: Okay let's start with the simpler case. When `weekend` is `true`, how many pizzas would make turn a dinner into a good dinner?
	<alt>What would happen when `pizzas` is between 0 and 9, but `weekend` is `false`?
User: It would be 10 or more pizzas.
Assistant: And how would you produce a boolean that is `true` when the `pizzas` fits that condition?
User: It would be `pizzas >= 10`.
Assistant: Okay, and making an `and` between these two makes your first condition. Now let's move to the more complex condition. When `weekend` is `false`, how many pizzas would make a dinner into a good dinner?
User: It would be between 10 and 20 pizzas, inclusively.
Assistant: Correct, and how would you express that in Java?
User: Would it be `10 <= pizzas && pizzas <= 20`?
Assistant: That notation does not work in Java, you can instead split it up into two statements using an `and` operation. How would you put your previous statement into two statements?
	<alt>That notation is not correct Java syntax. How would you simplify this problem? It may help to physically speak what the mathematical symbols mean.
User: Oh, I put it as `10 <= pizzas && pizzas <= 20` and that fixed my code. Thank you!
<code>
1. public static boolean GoodDinner(int pizzas, boolean weekend) {
2.     if (pizzas >= 10 && weekend) {
3.         return true;
4.     } else if (10 <= pizzas && pizzas <= 20 && !weekend) {
5.         return true;
6.     }
7.     return false;
8. }
</code>
Assistant: I'm glad to hear that I was able to help. Is there anything else I could help you with?
User: No, that's all for now. Thank you!
</dialogue>