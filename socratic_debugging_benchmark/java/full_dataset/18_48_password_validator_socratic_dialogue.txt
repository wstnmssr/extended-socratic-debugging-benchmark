<problem>
Create a function `validateOrAddPassword(String menuChoice, String password, Map<Integer, String> passwordsDict) -> String` that validates or adds a password. This function takes three parameters:
* `menuChoice (String)`: either 'v' for validate or 'a' for add password
* `password (String)`: the password to be validated or added
* `passwordsDict (Map<Integer, String>)`: a dictionary containing the passwords

The function returns a string "Welcome!" if the password is found in the dictionary and menuChoice is 'v'. If the password is not found in the dictionary, the function returns "I don't know you.". If menuChoice is 'a', the function adds the password to the dictionary and returns "Password added!". If the password is already in the dictionary, the function returns "Password already exists!".
## Example Cases:
```
Map<Integer, String> passwordsDict = new HashMap<>();
passwordsDict.put(1, "abc123");
passwordsDict.put(2, "qwerty");
passwordsDict.put(3, "password");
validateOrAddPassword("v", "abc123", passwordsDict) => "Welcome!"
validateOrAddPassword("v", "xyz789", passwordsDict) => "I don't know you."
validateOrAddPassword("a", "abc123", passwordsDict) => "Password already exists!"
validateOrAddPassword("a", "newpass", passwordsDict) => "Password added!"
passwordsDict.get(4).equals("newpass");
validateOrAddPassword("a", "newpass", passwordsDict) => "Password already exists!"
```
</problem>
<bug_code>
1. public static String validateOrAddPassword(String menuChoice, String password, Map<Integer, String> passwordsDict) {
2.     if (menuChoice.equals("v")) {
3.         if (passwordsDict.containsValue(password)) {
4.             return "Welcome!";
5.         } else {
6.             return "I don't know you.";
7.         }
8.     } else if (menuChoice.equals("a")) {
9.         if (passwordsDict.containsValue(password)) {
10.            return "Password already exists!";
11.        } else {
13.            return "Password added!";
14.        }
15.    }
16.    return "";
17. }
</bug_code>
<bug_desc>
The function does not add `password` to `passwordsDict` as specified in the instructions.
</bug_desc>
<bug_fixes>
After line 11 insert the following inside the `else` scope: `passwordsDict.put(passwordsDict.size() + 1, password);`
</bug_fixes>
<unit_tests>
Map<Integer, String> passwordsDict = new HashMap<>();
passwordsDict.put(1, "abc123");
passwordsDict.put(2, "qwerty");
passwordsDict.put(3, "password");
assert validateOrAddPassword("v", "abc123", passwordsDict).equals("Welcome!");
assert validateOrAddPassword("v", "xyz789", passwordsDict).equals("I don't know you.");
assert validateOrAddPassword("a", "abc123", passwordsDict).equals("Password already exists!");
assert validateOrAddPassword("a", "newpass", passwordsDict).equals("Password added!");
assert passwordsDict.get(4).equals("newpass");
assert validateOrAddPassword("a", "newpass", passwordsDict).equals("Password already exists!");
</unit_tests>
<stu_desc>

</stu_desc>
<dialogue>
User: Hello. I need help with my code.
	<alt>I need help with this code. It's throwing a `KeyError`. I'm not sure why.
Assistant: Can you describe the issue you are experiencing?
	<alt>Can you walk me through what your code does line by line when `menuChoice` is `"a"`?
	<alt>Let's go through the problem description together. What is the function `validateOrAddPassword` supposed to do when `menuChoice` is `"a"`?
User: I am getting a `KeyError: 4`. Not really sure why.
	<alt>My terminal is printing `KeyError: 4`. I think it's failing a test case perhaps.
Assistant: Let's look through the Java documentation together. What does the error `KeyError: 4` mean and why does it occur?
	<alt>What does `KeyError` typically mean and why does it occur?
	<alt>Let's look at the example cases, where do you see `4` being used as a key?
	<alt>Let's try to reproduce this error. Open the Java terminal and run, `Map<String, Integer> d = new HashMap<>(); d.put("a", 1); System.out.println(d.get("b"));`. What do you observe?
	<alt>Let's look at your error again. What line is throwing the `KeyError`?
	<alt>Which parameter in the `validateOrAddPassword` function is a data structure that uses keys?
User: After looking into the Java documentation, the `KeyError` seems to be caused by trying to access a dictionary using a key that does not exist.
Assistant: Good. Let's look through the example cases together. What do you think might be causing the `KeyError`?
	<alt>Good. Which test case do you think is causing the `KeyError`?
	<alt>Let's look at your error again. What line is throwing the `KeyError`?
User: Ah found it. In the example cases, line 18 is trying to access the value using the key 4 `passwordsDict.get(4).equals("newpass")`. However, `passwordsDict` is initialized to `passwordsDict.put(1, "abc123"); passwordsDict.put(2, "qwerty"); passwordsDict.put(3, "password");` and does not have 4 as a key.
	<alt>Ah found it. In the example cases, this line is trying to access the value using the key 4 `passwordsDict.get(4).equals("newpass")` after calling `validateOrAddPassword("a", "newpass", passwordsDict)` in an attempt to add "newpass" as a password.
Assistant: Good. What is the statement right before line 18 attempting to do?
User: Oh! I get it now! This example case is testing whether my function adds `"newpass"` to `passwordsDict`. I don't think I do that. I thought I just need to print "Password added!". Let me edit my code to ensure that it adds `password` to `passwordsDict` in this case.
<code>
public static String validateOrAddPassword(String menuChoice, String password, Map<Integer, String> passwordsDict) {
    if (menuChoice.equals("v")) {
        if (passwordsDict.containsValue(password)) {
            return "Welcome!";
        } else {
            return "I don't know you.";
        }
    } else if (menuChoice.equals("a")) {
        if (passwordsDict.containsValue(password)) {
            return "Password already exists!";
        } else {
            passwordsDict.put(passwordsDict.size() + 1, password);
            return "Password added!";
        }
    }
    return "";
}
</code>
Assistant: Good. Does your code pass all the example cases?
User: Yes it does thank you for your help. I learned more about `KeyError`s today.
Assistant: You're welcome to let me know if I can be of any further assistance.
</dialogue>