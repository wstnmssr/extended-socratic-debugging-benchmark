<problem>
Create a function `validateOrAddPassword(String menuChoice, String password, Map<Integer, String> passwordsDict) -> String` that validates or adds a password. This function takes three parameters:
* `menuChoice (String)`: either 'v' for validate or 'a' for add password
* `password (String)`: the password to be validated or added
* `passwordsDict (Map<Integer, String>)`: a dictionary containing the passwords

The function returns a string "Welcome!" if the password is found in the dictionary and menuChoice is 'v'. If the password is not found in the dictionary, the function returns "I don't know you.". If menuChoice is 'a', the function adds the password to the dictionary and returns "Password added!". If the password is already in the dictionary, the function returns "Password already exists!".
## Example Cases:
```
Map<Integer, String> passwordsDict = new HashMap<>();
passwordsDict.put(1, "abc123");
passwordsDict.put(2, "qwerty");
passwordsDict.put(3, "password");
validateOrAddPassword("v", "abc123", passwordsDict) => "Welcome!"
validateOrAddPassword("v", "xyz789", passwordsDict) => "I don't know you."
validateOrAddPassword("a", "abc123", passwordsDict) => "Password already exists!"
validateOrAddPassword("a", "newpass", passwordsDict) => "Password added!"
passwordsDict.get(4).equals("newpass");
validateOrAddPassword("a", "newpass", passwordsDict) => "Password already exists!"
```
</problem>
<bug_code>
1. public class PasswordManager {
2.     public static String validateOrAddPassword(String menuChoice, String password, Map<Integer, String> passwordsDict) {
3.         if (menuChoice.equals("v")) {
4.             if (passwordsDict.containsValue(password)) {
5.                 return "Welcome!";
6.             } else {
7.                 return "I don't know you.";
8.             }
9.         } else if (menuChoice.equals("a")) {
10.             if (passwordsDict.containsValue(password)) {
11.                 return "Password already exists!";
12.             } else {
14.                 return "Password added!";
15.             }
16.         }
17.         return "";
18.     }
19. }
</bug_code>
<bug_desc>
The function does not add `password` to `passwordsDict` as specified in the instructions.
</bug_desc>
<bug_fixes>
After line 12 insert the following inside the `else` scope: `passwordsDict.put(passwordsDict.size() + 1, password);`
</bug_fixes>
<unit_tests>
import java.util.HashMap;
import java.util.Map;

public class PasswordManagerTest {
    public static void main(String[] args) {
        Map<Integer, String> passwordsDict = new HashMap<>();
        passwordsDict.put(1, "abc123");
        passwordsDict.put(2, "qwerty");
        passwordsDict.put(3, "password");

        assert PasswordManager.validateOrAddPassword("v", "abc123", passwordsDict).equals("Welcome!");
        assert PasswordManager.validateOrAddPassword("v", "xyz789", passwordsDict).equals("I don't know you.");
        assert PasswordManager.validateOrAddPassword("a", "abc123", passwordsDict).equals("Password already exists!");
        assert PasswordManager.validateOrAddPassword("a", "newpass", passwordsDict).equals("Password added!");
        assert passwordsDict.get(4).equals("newpass");
        assert PasswordManager.validateOrAddPassword("a", "newpass", passwordsDict).equals("Password already exists!");
    }
}
</unit_tests>
<stu_desc>

</stu_desc>
<dialogue>
User: I need help with this code. It's throwing a `KeyError`. I'm not sure why.
	<alt>Hello. I need help with my code.
Assistant: Let's look through the Java documentation together. What does the error `KeyError: 4` mean and why does it occur?
	<alt>Let's go through the problem description together. What is the function `validateOrAddPassword` supposed to do when `menuChoice` is `"a"`?
	<alt>Let's look through the Java documentation together. What does the error `KeyError: 4` mean and why does it occur?
	<alt>What does `KeyError` typically mean and why does it occur?
	<alt>Let's look at the example cases, where do you see `4` being used as a key?
	<alt>Let's try to reproduce this error. Open the Java terminal and run, `Map<String, Integer> d = new HashMap<>(); d.put("a", 1); System.out.println(d.get("b"));`. What do you observe?
	<alt>Let's look at your error again. What line is throwing the `KeyError`?
	<alt>Which parameter in the `validateOrAddPassword` function is a data structure that uses keys?
	<alt>Can you walk me through what your code does line by line when `menuChoice` is `"a"`?
User: After looking into the Java documentation, the `KeyError` seems to be caused by trying to access a dictionary using a key that does not exist. I wonder if this relates to adding a new password.
Assistant: Good hypothesis. Can you walk me through what your code does line by line when `menuChoice` is `"a"`?
	<alt>Good. Let's look through the example cases together. What do you think might be causing the `KeyError`?
	<alt>Good. Which test case do you think is causing the `KeyError`?
	<alt>Let's look at your error again. What line is throwing the `KeyError`?
User: Certainly. So when `menuChoice` is `"a"` we go to line 10, we check if  `password` is already stored in `passwordsDict`. If so, the function returns "Password already exists!" otherwise it returns "Password added!".
Assistant: Good. Let's go through the problem description together. What is the function `validateOrAddPassword` supposed to do when `menuChoice` is `"a"`?
	<alt>According to the problem description, what do you need to do with `password` if `menuChoice` is `"a"`?
User: Oh. It is supposed to add `password` to `passwordsDict` and then return "Password added!". Let me edit my code.
<code>
1. public class PasswordManager {
2.     public static String validateOrAddPassword(String menuChoice, String password, Map<Integer, String> passwordsDict) {
3.         if (menuChoice.equals("v")) {
4.             if (passwordsDict.containsValue(password)) {
5.                 return "Welcome!";
6.             } else {
7.                 return "I don't know you.";
8.             }
9.         } else if (menuChoice.equals("a")) {
10.             if (passwordsDict.containsValue(password)) {
11.                 return "Password already exists!";
12.             } else {
13.                 passwordsDict.put(passwordsDict.size() + 1, password);
14.                 return "Password added!";
15.             }
16.         }
17.         return "";
18.     }
19. }
</code>
Assistant: Good. Have you tried your code on all the example cases?
User: Yes. It works correctly! Thank you for helping me today!
Assistant: You're welcome. Let me know if I can be of any further assistance in the future.
</dialogue>