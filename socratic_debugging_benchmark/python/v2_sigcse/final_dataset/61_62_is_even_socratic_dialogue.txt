<problem>
Define a function called `SumIsEven(a:int, b:int) -> bool` which takes two integer inputs and returns true if and only if the sum of the two values is an even number. If the sum of the input values is an odd number, then the function must return false.

## Example Cases: 
```
SumIsEven(1,1) => True
SumIsEven(1,2) => False
SumIsEven(2,2) => True
SumIsEven(2,3) => False
```
</problem>
<bug_code>
1. def SumIsEven(a, b):
2.	return (a+b) % 2 == 1
3.
</bug_code>
<bug_desc>
The function returns True when `a + b` is not divisible by 2 instead of returning True when `a + b` is divisible by 2.
</bug_desc>
<bug_fixes>
Replace `1` with `0` to ensure that the sum is even.
</bug_fixes>
<unit_tests>
assert SumIsEven(1,1) == True
assert SumIsEven(1,2) == False
assert SumIsEven(2,2) == True
assert SumIsEven(2,3) == False
</unit_tests>
<stu_desc>

</stu_desc>
<dialogue>
User: Hello! I'm working with the `SumIsEven()` function and it is giving me the opposite answer than I am expecting and I'm not sure why that is the case.
Assistant: Hello! I see you're using a modulo operation in your code, can you explain how that operation works in simple terms?
User: From what I understand, it tells you if a number is divisible by another number, right?
Assistant: The modulo operation is capable of doing this, but it actually does more than that. The modulo operation will return the remainder of the division of the two operands. If this is the case, what will be the value of `(a+b) % 2` when `a+b` is even?
	<alt>The modulo operation is more than a divisibility operand. It returns a remainder. Can you explain the significance of that?
User: Oh, it would return 0! That's why my program is responding with the opposite answer. That makes a lot more sense now, thank you!
<code>
1. def SumIsEven(a, b):
2.	return (a+b) % 2 == 0
</code>
Assistant: I'm happy to help! Is there anything else I can help you with today?
User: No, that's all for now. Thank you!
</dialogue>