<problem>
Write a function `substrLen(String s, String t)` that takes as input a string `s` and a non-empty string `t` and returns the length of the longest substring of `s` that does not contain `t`. For example, if `s = "abracadabra"` and `t = "ca"`, then the longest substring of `s` that does not contain `t` is `"dabra"`, so the function should return 5.
## Example Cases:
```
substrLen("abracadabra", "ca") => 5
substrLen("I love Python", "Py") => 7
substrLen("contest", "test") => 3
substrLen("icey ice", "ice") => 2
substrLen("icey ice cream", "ice") => 6
substrLen("abracadabra", "abba") => 11
```
</problem>
<bug_code>
1. public static int substrLen(String s, String t) {
2.     int maxLen = 0;
3.     int start = 0;
4.     int pos = s.indexOf(t, start);
5.     while (pos != -1) {
6.         String crtStr = s.substring(start, pos);
7.         int crtLen = crtStr.length();
8.         if (crtLen > maxLen) {
9.             maxLen = crtLen;
10.        }
11.        start = pos + t.length();
12.        pos = s.indexOf(t, start);
13.    }
14.    return maxLen;
15. }
</bug_code>
<bug_desc>
The code does not check for the case when the longest substring is at the end of the string, therefore it fails on test examples 1 and 5.
</bug_desc>
<bug_fixes>
After line 12, insert the following outside the while loop scope:
```java
String lastStr = s.substring(start);
int lastLen = lastStr.length();
if (lastLen > maxLen) {
    maxLen = lastLen;
}
```
</bug_fixes>
<unit_tests>
assert substrLen("abracadabra", "ca") == 5;
assert substrLen("I love Python", "Py") == 7;
assert substrLen("contest", "test") == 3;
assert substrLen("icey ice", "ice") == 2;
assert substrLen("icey ice cream", "ice") == 6;
assert substrLen("abracadabra", "abba") == 11;
</unit_tests>
<stu_desc>

</stu_desc>
<dialogue>
User: Hi! My code does not stop and I do not understand why, can you help?
Assistant: Sure. Can you tell me the role of the variable `start`?
	<alt>Sure. Can you explain to me what your code is supposed to do, line by line? Explain the role of each variable.
	<alt>Sure. Let's assume the code runs on the first test example, can you run it manually for me line by line and show the value of each variable until you are done with one iteration of the while loop?
User: `start` is supposed to indicate the position in `s` where we want to start searching for the next occurrence of `t`. Initially, we start searching from the start of the string, therefore it is initialized with 0.
Assistant: OK. So, after you find the first occurrence of `t` at position `pos` in `s`, where do you want to start searching for the next occurrence of `t`?
	<alt>OK. So the first value of `start` is 0, what is the next value of `start`?
	<alt>OK. Can you run your code manually on the first test example and tell me what are the values that `start` takes in each iteration of the while loop?
	<alt>OK. Does `start` ever change inside the while loop?
User: Ah, I see the problem, I forgot to change `start` inside the while loop. Let me do that ... it works now. Thank you!
<code>
1. public static int substrLen(String s, String t) {
2.     int maxLen = 0;
3.     int start = 0;
4.     int pos = s.indexOf(t, start);
5.     while (pos != -1) {
6.         String crtStr = s.substring(start, pos);
7.         int crtLen = crtStr.length();
8.         if (crtLen > maxLen) {
9.             maxLen = crtLen;
10.        }
11.        start = pos + t.length();
12.        pos = s.indexOf(t, start);
13.    }
14.    String lastStr = s.substring(start);
15.    int lastLen = lastStr.length();
16.    if (lastLen > maxLen) {
17.        maxLen = lastLen;
18.    }
19.    return maxLen;
20. }
</code>
Assistant: Great, happy to help!
</dialogue>