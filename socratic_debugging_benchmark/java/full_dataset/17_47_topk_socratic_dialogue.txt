<problem>
Write a function `topK(List<Integer> lst, int k) -> List<Integer>` that returns the top k largest elements in the list. You can assume that k is always smaller than the length of the list.
## Example Cases:
```
topK(Arrays.asList(1, 2, 3, 4, 5), 3) => Arrays.asList(5, 4, 3)
topK(Arrays.asList(-1, -2, -3, -4, -5), 3) => Arrays.asList(-1, -2, -3)
topK(Arrays.asList(), 0) => Arrays.asList()
topK(Arrays.asList(550, 750, 3000, 2000, 1000), 3) => Arrays.asList(3000, 2000, 1000)
topK(Arrays.asList(555, 777, 555, -1, 0), 3) => Arrays.asList(777, 555, 555)
```
</problem>
<bug_code>
1. public static List<Integer> topK(List<Integer> lst, int k) {
2.     LinkedList<Integer> result = new ArrayList<>();
3.     for (int i = 0; i < k; i++) {
4.         int max = Collections.max(lst);
5.         result.add(max);
6.         lst.pop(Integer.valueOf(max));
7.     }
8.     return result;
9. }
</bug_code>
<bug_desc>
The function removes the element at index `Collections.max(lst)` instead of removing an element equal to `Collections.max(lst)`. Consequently, the function throws an IndexOutOfBoundsException on line 6 when a removed value in `lst` is greater than the length of `lst`.
</bug_desc>
<bug_fixes>
On line 6, replace `lst.remove(max)` with `lst.remove(Integer.valueOf(max))`
</bug_fixes>
<unit_tests>
assert topK(Arrays.asList(1, 2, 3, 4, 5), 3).equals(Arrays.asList(5, 4, 3));
assert topK(Arrays.asList(-1, -2, -3, -4, -5), 3).equals(Arrays.asList(-1, -2, -3));
assert topK(Arrays.asList(), 0).equals(Arrays.asList());
assert topK(Arrays.asList(550, 750, 3000, 2000, 1000), 3).equals(Arrays.asList(3000, 2000, 1000));
assert topK(Arrays.asList(555, 777, 555, -1, 0), 3).equals(Arrays.asList(777, 555, 555));
</unit_tests>
<stu_desc>

</stu_desc>
<dialogue>
User: Hi. I am confused. My code doesn’t seem to work. Can you help?
Assistant: Hello. Sure, let's see. Do you know what might be the issue?
User: I think the problem is with the `.remove()` method. It seems to have issues with indexing.
	<alt>When I use the `.remove()` method, I get an IndexOutOfBoundsException on some inputs.
	<alt>For some inputs, I get an error and other inputs don't produce the right answer.
Assistant: Ok, no worries. Let's review your code line by line. Could you please explain it to me?
	<alt>Let's start with a simple example. What is the output of the following code snippet: `topK(Arrays.asList(1, 2, 3, 4, 5), 3)`?
	<alt>Let's start with a warm-up question. What does the `.remove()` method do?
	<alt>Let's start with a warm-up question. What do you think the output of the following code snippet will be: `Arrays.asList(1, 5, 3, 4, 2).remove(5)`?
	<alt>Could you please explain what line 6 in your code does?
	<alt>Let’s look into the Java documentation. Can you describe what the `.remove()` method does?
User: Sure. First, I create an empty list where I will save the numbers from the given list. Then I add a for-loop and set the number of iterations it makes to K, which is the number of values the output list must contain. After that, I search for the maximum value in the given list. Once the value is found, I add it to the empty list I created earlier and then remove the value from the given list.
Assistant: Good. What can you do right now to debug your code and diagnose what might be causing the problem?
User: Hm… The problem is in the `.remove()` method. I can try debugging it by printing the given list to see how it is affected and the `Collections.max(lst)` to see what the `.remove()` method receives as the input. So printing the `Collections.max(lst)` command results in the maximum value of the given list. When I try executing the `.remove()` method, it raises an error. I am not sure what I am doing wrong.
	<alt>I could try a more simple input and print out the max and the full list to see how it is processed. When I use the input `Arrays.asList(0, 1)`, It seems to work, but when using `Arrays.asList(1)`, it throws an error. I think it is removing elements by index and not by value, maybe I should use a different deletion method.
<code>
1. public static List<Integer> topK(List<Integer> lst, int k) {
2.     List<Integer> result = new ArrayList<>();
3.     for (int i = 0; i < k; i++) {
4.         int max = Collections.max(lst);
5.         result.add(max);
6.         System.out.println(max);
7.         lst.remove(max);
8.         System.out.println(lst);
9.     }
10.    return result;
11. }
</code>
Assistant: Are there other ways of debugging the `.remove()` method?
	<alt>What happens if you use a different input value for the `topK()` function?
	<alt>Have you considered using the debugger?
	<alt>What do you think the output of the following code snippet will be: `Arrays.asList(1, 5, 3, 4, 2).remove(5)`?
User: Hm... I probably could use a different value as the input for this method. So using 1 as the input value worked. The `.remove()` method seems to remove the value that has the index value of 1 in the given list. This is not what I was expecting from this method. What should I do?
<code>
1. public static List<Integer> topK(List<Integer> lst, int k) {
2.     List<Integer> result = new ArrayList<>();
3.     for (int i = 0; i < k; i++) {
4.         int max = Collections.max(lst);
5.         result.add(max);
6.         System.out.println(lst);
7.         lst.remove(1);
8.         System.out.println(lst);
9.     }
10.    return result;
11. }
</code>
Assistant: Perhaps there are other solutions you can use aside from `.remove()`?
	<alt>Where can we learn more about other list methods that can help us remove elements from an array?
	<alt>I would suggest checking Java documentation. Perhaps you will be able to find useful information there?
User: I think but I can't remember them...
Assistant: I would suggest checking Java documentation. Perhaps you will be able to find useful information there?
User: Ok. Oh I see, I used the wrong method. I should use `.remove(Integer.valueOf(max))` instead. Aha! It works now. I removed the print statements also.
<code>
1. public static List<Integer> topK(List<Integer> lst, int k) {
2.     List<Integer> result = new ArrayList<>();
3.     for (int i = 0; i < k; i++) {
4.         int max = Collections.max(lst);
5.         result.add(max);
6.         lst.remove(Integer.valueOf(max));
7.     }
8.     return result;
9. }
</code>
Assistant: Great! Please let me know if you need help with anything else.
</dialogue>