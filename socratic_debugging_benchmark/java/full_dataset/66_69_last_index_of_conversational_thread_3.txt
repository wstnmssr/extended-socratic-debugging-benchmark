<problem>
Write a function called `lastIndexOf(int value, int[] array) -> int` which is passed two inputs: a value to search for, and an array of integers in which to search. This function should return the index position of the last occurrence (i.e. the rightmost occurrence) of the value being searched for. If the value being searched for does not exist in the array, then the function should return -1.

## Example Cases:
```
lastIndexOf(1, new int[]{1,1,1,1}) => 3
lastIndexOf(2, new int[]{2,0,1,2})  => 3
lastIndexOf(3, new int[]{1,1,1,1}) => -1
lastIndexOf(4, new int[]{4,1,1,1}) => 0
```
</problem>
<bug_code>
1. public int lastIndexOf(int value, int[] array) {
2.    int index = -1;
3.    for (int i = array.length - 1; i <= 0; i--) {
4.        if (array[i] == value) {
5.            index = i;
6.            break;
7.        }
8.    }
9.    return index;
10. }
</bug_code>
<bug_desc>
On line 3, the range is from `array.length - 1` to `0`. The `for` loop does not iterate when the start is greater than the stop. Consequently, the for loop is not executed and the function always returns -1.
</bug_desc>
<bug_fixes>
Change the `for` loop on line 3 to `for (int i = array.length - 1; i >= 0; i--)` to iterate backwards from `array.length - 1` to `0`.
</bug_fixes>
<unit_tests>
assert lastIndexOf(1, new int[]{1,1,1,1}) == 3;
assert lastIndexOf(2, new int[]{2,0,1,2}) == 3;
assert lastIndexOf(3, new int[]{1,1,1,1}) == -1;
assert lastIndexOf(4, new int[]{4,1,1,1}) == 0;
</unit_tests>
<stu_desc>

</stu_desc>
<dialogue>
User: Hello, I was working on the `lastIndexOf()` function and it only responds with -1 each time and I cannot understand why.
Assistant: Can you explain what your function does step by step?
User: `index` is initialized to -1, then the entire list is iterated in reverse, checking if each element of `array` at index `i` is equivalent to `value`, and if it is setting index equal to that value.
Assistant: What is important about counting backwards?
User: We are looking for the greatest index of `value`, searching in reverse would make that faster.
Assistant: How would you defend against changing the value of `index` when you have already found the last index of `value` in the list?
User: Oh, I can put in `array[i] == value and i > index`, right?
Assistant: But if speed was the goal of counting backwards, would you still not process every element of the list?
	<alt>This would be correct, except there is one issue remaining with how you're using `range()`. Can you see a problem with the numbers you're using as input?
User: Oh, that is true, but why would it work differently than a forward counting loop?
Assistant: That is due to the function you are using for your `for` loop. You are using `range(start, end)` which only counts up by 1. Can you give me the form of `range(start, end, step)` you should be using?
	<alt>Can you notice something awry with your use of the `range()` function as compared to how you've used it in previous assignments?
User: So that is the difference! It would become `for (int i = array.length - 1; i >= 0; i--)`.
<code>
1. public int lastIndexOf(int value, int[] array) {
2.    int index = -1;
3.    for (int i = array.length - 1; i >= 0; i--) {
4.        if (array[i] == value) {
5.            index = i;
6.            break;
7.        }
8.    }
9.    return index;
10. }
</code>
Assistant: That is entirely correct.
	<alt>That is entirely correct! Can you explain why your version would be more efficient than a version that counts upwards, in some scenarios?
User: Thank you for your help!
Assistant: I'm glad that I could be of assistance. Is there anything else I can do for you today?
User: No, that's all for now. Thank you!
</dialogue>