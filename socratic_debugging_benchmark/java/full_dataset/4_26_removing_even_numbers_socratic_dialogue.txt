<problem>
Create a method `returnOdd(List<Integer> nums) -> List<Integer>` that accepts a list `nums`. It should filter out all the even integers from the list `nums` and return a new list that contains only the odd integers from the original list.

## Example Cases:
```
returnOdd(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) => Arrays.asList(1, 3, 5, 7, 9)
returnOdd(Arrays.asList(2, 4, 6, 8, 10)) => Arrays.asList()
returnOdd(Arrays.asList(1, 3, 5, 7, 9)) => Arrays.asList(1, 3, 5, 7, 9)
returnOdd(Arrays.asList(-76, -92, 9, -1, 7, 10)) => Arrays.asList(9, -1, 7)
```
</problem>
<bug_code>
1. public List<Integer> returnOdd(List<Integer> nums) {
2.    List<Integer> newNums = new ArrayList<>();
3.    for (int i : nums) {
4.        if (i % 2 != 0) {
5.            newNums.add(i);
6.		  }
7.        return newNums;
8.    }
9. }
</bug_code>
<bug_desc>
On line 6, the function returns the array `newNums` after the first iteration of the for loop. Consequently, the function returns `newNums` containing up to 1 odd value from `nums` instead of returning `newNums` containing all the odd values in `nums`.
</bug_desc>
<bug_fixes>
Put the return statement on line 7 outside of the for loop.
</bug_fixes>
<unit_tests>
assert returnOdd(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)).equals(Arrays.asList(1, 3, 5, 7, 9));
assert returnOdd(Arrays.asList(2, 4, 6, 8, 10)).equals(Arrays.asList());
assert returnOdd(Arrays.asList(1, 3, 5, 7, 9)).equals(Arrays.asList(1, 3, 5, 7, 9));
assert returnOdd(Arrays.asList(-76, -92, 9, -1, 7, 10)).equals(Arrays.asList(9, -1, 7));
</unit_tests>
<stu_desc>

</stu_desc>
<dialogue>
User: Help, I'm stuck.
Assistant: What should your code be doing?
	<alt>Which test cases (if any) are failing?
	<alt>What are you stuck on?
	<alt>Can you explain your code line by line, given that `nums` is `Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)`?
User: Right now, it's only returning the first number in the list, not all of them.
	<alt>It's only passing the second test case.
Assistant: Okay, let's look at your loop. Do you see anything that could be causing it to end early?
	<alt>Have you checked the loop and how many times it iterates?
	<alt>Let's add a print statement into your for loop that prints `i` and then execute it. What do you observe?
	<alt>What do you think might cause your function to return a list with one element instead of multiple elements?
	<alt>Let's use the debugger and step through the function while tracking the values of `i` and `newNums`. What do you observe?
	<alt>What do you think is causing the lists not to include all the numbers?
	<alt>Look at line 3, is it iterating through the whole list?
User: No I do not. I'm iterating through the whole list of numbers.
	<alt>I don't know, how could I find out?
	<alt>Oh, I see, the return statement is in the wrong place.
Assistant: Let's verify this by tracing the code in the loop. Can you tell me what your code does starting from line 3?
	<alt>What can cause a function to end early?
	<alt>What forces a loop to end?
User: Line 3 starts the loop, and it iterates through everything in `nums`. The if statement on line 4 checks whether the number is even. If the number is odd, it is appended to the list on line 5. On line 6, the function returns the list.
Assistant: When should the function return the list?
	<alt>Think back to what you know about functions. What makes them end early?
	<alt>Think back to what you know about loops, what can make them stop?
User: It should return the list when it finishes iterating through all the numbers.
Assistant: Look at line 7, what scope is the list in?
	<alt>Think back to what you have learned about scope, how does that control the order of actions in a loop?
	<alt>Can the return statement end the loop early?
User: I see, I'm using braces wrong! It's returning the list as part of the loop, not after it. Let me change the placement of the return statement.
<code>
1. public List<Integer> returnOdd(List<Integer> nums) {
2.    List<Integer> newNums = new ArrayList<>();
3.    for (int i : nums) {
4.        if (i % 2 != 0) {
5.            newNums.add(i);
6.        }
7.    }
8.    return newNums;
9. }
</code>
Assistant: What does it return now, after you changed the placement of the return statement?
User: It works properly! Thank you! Now the return statement executes after the for loop iterates through all the elements in `nums`.
Assistant: You're welcome. Let me know if I can be of any further assistance.
</dialogue>