<problem>
Define a function called `SumBetween(low:int, high:int) -> int` which takes two integer inputs, low and high. This function should calculate the sum of all integers between low and high inclusive.

## Example Cases:
```
SumBetween(0,1) => 1
SumBetween(0,2) => 3
SumBetween(1,2) => 3
SumBetween(3,5) => 12
```
</problem>
<bug_code>
1. def SumBetween(low, high):
2.	num = 0
3.	for i in range(low, high):
4.		num += i
5.	return num
</bug_code>
<bug_desc>
The function returns the sum of numbers between `low` and `high`, but excludes the upper bound `high` instead of including both ends of the range. 
</bug_desc>
<bug_fixes>
Replace `high` with `high + 1`.
</bug_fixes>
<unit_tests>
assert SumBetween(0,1) == 1
assert SumBetween(0,2) == 3
assert SumBetween(1,2) == 3
assert SumBetween(3,5) == 12
</unit_tests>
<stu_desc>

</stu_desc>
<dialogue>
User: Hello! I am having trouble with my `SumBetween()` function. It keeps producing values that are only a little bit wrong compared to the expected values, and I don't know why.
Assistant: Hello! I think that your issue may be in your understanding of `range()`. What do you believe is returned from `range(0,1)`, for example?
User: It would be a list containing 0 and 1, right?
Assistant: That is not correct. `range()` is not inclusive of its second argument, meaning that `range(0,1)` is actually a list containing only one element, 0.
User: Oh, I added 1 to `high` in my `range()` function and it works now, I didn't know that it wasn't inclusive of the second argument. Thank you for your help!
<code>
1. def SumBetween(low, high):
2.	num = 0
3.	for i in range(low, high+1):
4.		num += i
5.	return num
</code>
Assistant: I'm glad to be of assistance. Is there anything else I can do for you today?
User: No, that's all for now. Thank you!
</dialogue>