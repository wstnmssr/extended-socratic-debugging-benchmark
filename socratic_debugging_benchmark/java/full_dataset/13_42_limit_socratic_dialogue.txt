<problem>
Write a method `limitFinder(List<Integer> lst, int limit) -> List<Integer>` that takes a list of numbers and a limit and returns a list of all the numbers in the list that are less than the limit.
## Example Cases:
```
limitFinder(Arrays.asList(1, 2, 3, 4, 5), 3) => Arrays.asList(1, 2)
limitFinder(Arrays.asList(1, 5, 4, 3, 5), 6) => Arrays.asList(1, 2, 3, 4, 5)
limitFinder(Arrays.asList(100, 2, 145, 3, 8), 0) => Arrays.asList()
limitFinder(Arrays.asList(-1, -3, -4, -2, -5), -3) => Arrays.asList(-4, -5)
limitFinder(Arrays.asList(), 0) => Arrays.asList()
```
</problem>
<bug_code>
1. public static List<Integer> limitFinder(List<Integer> lst, int limit) {
2.     List<Integer> lst2 = new ArrayList<>();
3.     for (int i : lst2) {
4.         if (i < limit) {
5.             lst2.add(i);
6.         }
7.     }
8.     return lst2;
9. }
</bug_code>
<bug_desc>
On line 3, the for loop attempts iterating through `lst2` which is empty. Consequently, the for loop does not iterate and the function returns an empty list.
</bug_desc>
<bug_fixes>
Replace `lst2` with `lst` on line 3.
</bug_fixes>
<unit_tests>
assert limitFinder(Arrays.asList(1, 2, 3, 4, 5), 3).equals(Arrays.asList(1, 2));
assert limitFinder(Arrays.asList(1, 5, 4, 3, 5), 6).equals(Arrays.asList(1, 2, 3, 4, 5));
assert limitFinder(Arrays.asList(100, 2, 145, 3, 8), 0).equals(Arrays.asList());
assert limitFinder(Arrays.asList(-1, -3, -4, -2, -5), -3).equals(Arrays.asList(-4, -5));
assert limitFinder(Arrays.asList(), 0).equals(Arrays.asList());
</unit_tests>
<stu_desc>

</stu_desc>
<dialogue>
User: Hi! My program seems to always return an empty list instead of a list of numbers, can you help?
Assistant: Sure. Can you walk me through what each line does?
	<alt>Sure. Can you tell me which list are you supposed to find the numbers from?
	<alt>Sure, can you explain what line 3 does?
	<alt>Sure. It looks like your for-loop is never executed. Do you know why?
User: Line 2 - creates an empty list `lst2`, which will eventually store all the numbers that are less than the limit.
Assistant: Ok, what about the next line?
User: Line 3 - loops through all the numbers in `lst2`
	<alt>It looks like line 3 loops through the wrong list! Is that the issue here?
Assistant: How many numbers are in `lst2`?
	<alt>Will the for loop ever be executed?
	<alt>Is `lst2` empty?
	<alt>How many times will the for loop execute?
	<alt>Is that the list that you want to loop through?
User: `Oh I see, `lst2` is empty, so the for loop is never executed.
Assistant: Correct, how would you fix your for loop now?
User: Should I be looping over `lst` instead?
Assistant: Yes, what does the new code look like?
User: This code works, thank you!
<code>
public static List<Integer> limitFinder(List<Integer> lst, int limit) {
    List<Integer> lst2 = new ArrayList<>();
    for (int i : lst) {
        if (i < limit) {
            lst2.add(i);
        }
    }
    return lst2;
}
</code>
Assistant: You are welcome!
</dialogue>